<?php

namespace Design\LaravelCli\Console;

use Illuminate\Support\Env;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Workerman\Worker;

class Workerman extends Command
{
    private $server;

    private $config;

    private $handles = ['onWorkerStart', 'onConnect', 'onMessage', 'onClose', 'onError', 'onBufferFull', 'onBufferDrain', 'onWorkerReload', 'onWebSocketConnect'];

    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'cli:workerman';

    protected function configure()
    {
        parent::configure(); // TODO: Change the autogenerated stub

        $this->config = config('cli.workerman');

        $this->addArgument('status', InputArgument::REQUIRED, 'start/stop/reload/status/connections')
            ->addOption('d', null, InputOption::VALUE_NONE, 'daemon（守护进程）方式启动');
    }

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'run laravel for cli';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }


    protected function init(InputInterface $input, OutputInterface $output)
    {
        global $argv;
        array_splice($argv, 2, 1);

        $argv[1] = $input->getArgument('status') ?: 'start';
        if ($input->getOption('d') !== false) {
            array_pop($argv);
            $argv[] = '-d';
        }
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $this->init($input, $output);

        Worker::$pidFile = config('cli.workerman.path') .
            str_replace(['%SERVER%', '%IP%'], ['workerman_http', Env::get('SERVER_IP')], config('cli.workerman.pid'));

        $this->server = new Worker("{$this->config['protocol']}://{$this->config['ip']}:{$this->config['port']}");
        $this->server->count = $this->config['count'] ?? 2;
        $this->server->name = $this->config['name'] ?? 'workerman http';

        $this->server->onMessage = [new \Design\LaravelCli\Cli\Workerman(), 'onMessage'];
        try {
            Worker::runAll();
        } catch (\Exception $e) {
            $this->message($e->getMessage(), 'yellow');
        }
    }
}
